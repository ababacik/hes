using Newtonsoft.Json;
using kk33.RbxStreamSniper.Json;
using System.Linq;
using System.Threading;

namespace kk33.RbxStreamSniper
{
@@ -23,17 +24,14 @@ class Options
            [Option('n', "username", Required = false, HelpText = "Target user name.")]
            public string UserName { get; set; }

            [Option('g', "gameid", Required = false, HelpText = "Target game ID.")]
            public string GameId { get; set; }
            [Option('p', "placeid", Required = false, HelpText = "Target game ID.")]
            public string PlaceId { get; set; }

            [Option('s', "gamename", Required = false, HelpText = "Search for game by name and use first result.")]
            [Option('s', "game", Required = false, HelpText = "Search for game by name and use first result.")]
            public string GameName { get; set; }
        }

        static PlaceInstances GetPlaceInstances(string placeId, int page, string cookie)
        {
            return JsonConvert.DeserializeObject<PlaceInstances>(HttpHelpers.Get($"https://www.roblox.com/games/getgameinstancesjson?placeId={placeId}&startindex={page * 10}", cookie));
        }


        static void Main(string[] args)
        {
@@ -46,142 +44,145 @@ static void Main(string[] args)
                string ownid = null;
                int totalPages = 0;
                if (o.Cookie == null)
                Console.WriteLine();
                if (o.Cookie != null)
                {
                    cookie = ".ROBLOSECURITY=" + o.Cookie.Trim();
                }
                else
                {
                    if (Environment.GetEnvironmentVariable("rbxcookie") == null)
                    if (Environment.GetEnvironmentVariable("rbxcookie") != null)
                    {
                        Console.WriteLine("No .ROBLOSECURITY cookie specified. You may also use \"rbxcookie\" environment variable.");
                        Environment.Exit(1);
                        cookie = ".ROBLOSECURITY=" + Environment.GetEnvironmentVariable("rbxcookie").Trim();
                    }
                    else
                    {
                        cookie = ".ROBLOSECURITY=" + Environment.GetEnvironmentVariable("rbxcookie").Trim();
                        Console.WriteLine("No .ROBLOSECURITY cookie specified. You may also use \"rbxcookie\" environment variable.");
                        Environment.Exit(1);
                    }
                }
                else
                {
                    cookie = ".ROBLOSECURITY=" + o.Cookie.Trim();
                }
                Console.Write("Getting to get your ID... ");
                Console.Write("Getting your ID to test cookie... ");
                try
                {
                    ownid = HttpHelpers.Get($"https://www.roblox.com/game/GetCurrentUser.ashx", cookie);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString() + " | " + e.InnerException?.ToString());
                    Environment.Exit(2);
                    ownid = Roblox.GetOwnId(cookie);
                }
                catch (Exception e) { CatchException(e); }
                Console.WriteLine(ownid);
                Console.Write("Getting target user ID... ");
                if (o.UserId == null)
                if (o.UserId != null)
                {
                    if (o.UserName == null)
                    {
                        Console.WriteLine("No user specified.");
                        Environment.Exit(1);
                    }
                    else
                    userid = o.UserId;
                }
                else
                {
                    if (o.UserName != null)
                    {
                        try 
                        try
                        {
                            userid = JsonConvert.DeserializeObject<GetByUsername>(HttpHelpers.Get($"https://api.roblox.com/users/get-by-username?username={o.UserName.Trim()}")).Id.ToString();
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.ToString() + " | " + e.InnerException.ToString());
                            Environment.Exit(2);
                        }
                        catch (Exception e) { CatchException(e); }
                    }
                    else
                    {
                        Console.WriteLine("No user specified.");
                        Environment.Exit(1);
                    }
                }
                else
                {
                    userid = o.UserId;
                }
                Console.WriteLine(userid);
                Console.Write("Getting target user avatar url... ");
                try
                {
                    avatar = HttpHelpers.GetRedirectLocation($"https://www.roblox.com/headshot-thumbnail/image?userId={userid}&width=48&height=48&format=png");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString() + " | " + e.InnerException?.ToString());
                    Environment.Exit(2);
                    avatar = Roblox.GetAvatarHeadshotUrl(userid);
                }
                catch (Exception e) { CatchException(e); }
                Console.WriteLine(avatar);
                Console.Write("Getting place ID... ");
                if (o.GameId == null)
                if (o.PlaceId != null)
                {
                    if (o.GameName == null)
                    {
                        Console.WriteLine("No game specified.");
                        Environment.Exit(1);
                    }
                    else
                    placeid = o.PlaceId;
                }
                else
                {
                    if (o.GameName != null)
                    {
                        try
                        {
                            placeid = JsonConvert.DeserializeObject<List<Place>>(HttpHelpers.Get($"https://www.roblox.com/games/list-json?MaxRows=1&Keyword={o.GameName.Trim()}"))[0].PlaceID.ToString();
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.ToString() + " | " + e.InnerException?.ToString());
                            Environment.Exit(2);
                            placeid = Roblox.FindFirstPlace(o.GameName).PlaceID.ToString();
                        }
                        catch (Exception e) { CatchException(e); }
                    }
                    else
                    {
                        Console.WriteLine("No game specified.");
                        Environment.Exit(1);
                    }
                }
                else
                {
                    placeid = o.GameId;
                }
                Console.WriteLine(placeid);
                Console.Write("Getting total server count... ");
                try
                {
                    totalPages = (int)Math.Ceiling((decimal)GetPlaceInstances(placeid, 0, cookie).TotalCollectionSize / 10);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString() + " | " + e.InnerException?.ToString());
                    Environment.Exit(2);
                    totalPages = (int)Math.Ceiling((decimal)Roblox.GetPlaceInstances(placeid, 0, cookie).TotalCollectionSize / 10);
                }
                catch (Exception e) { CatchException(e); }
                Console.WriteLine(totalPages);
                Console.WriteLine();
                for (int page = 0; page <= totalPages; page++)
                {
                    try
                    {
                        PlaceInstances pin = GetPlaceInstances(placeid, page, cookie);
                        foreach (var (server, iserver) in pin.Collection.WithIndex())
                        foreach (var (player, iplayer) in server.CurrentPlayers.WithIndex())
                        if (player.Thumbnail.Url == avatar)
                        {
                            Console.WriteLine(server.JoinScript);
                            Environment.Exit(0);
                        }
                        else
                        {
                            Console.WriteLine($"Searching... Page: {page + 1}/{totalPages}, Server: {iserver + 1}/{pin.Collection.Count}, Player: {iplayer + 1}/{server.CurrentPlayers.Count}");
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.ToString() + " | " + e.InnerException?.ToString());
                        Environment.Exit(2);
                        PlaceInstances placeInstances = Roblox.GetPlaceInstances(placeid, page, cookie);
                        foreach (var (server, iserver) in placeInstances.Collection.WithIndex())
                            foreach (var (player, iplayer) in server.CurrentPlayers.WithIndex())
                                if (player.Thumbnail.Url == avatar)
                                {
                                    Console.WriteLine();
                                    Console.WriteLine();
                                    Console.WriteLine(" Result: " + server.JoinScript);
                                    Console.WriteLine();
                                    Environment.Exit(0);
                                }
                                else
                                {
                                    string text = $" {page + 1}/{totalPages}  [";
                                    int textLen = text.CountCharacters();
                                    Console.SetCursorPosition(0, Console.CursorTop);
                                    Console.Write(text + ProgressBar.Generate(page * 100 / 500, Console.WindowWidth - textLen - 2) + "] ");
                                }
                    }
                    catch (Exception e) { CatchException(e); }
                }
                Console.WriteLine();
                Console.WriteLine();
                Console.WriteLine("Cant find player...");
                Console.WriteLine();
            });
        }

        public static void CatchException(Exception e)
        {
            Console.WriteLine("\r\n===========\r\nException: " + e.ToString() + " | " + e.InnerException?.ToString());
            Environment.Exit(2);
        }
    }

    public static class Extensions
    {
        public static IEnumerable<(T item, int index)> WithIndex<T>(this IEnumerable<T> self) => self.Select((item, index) => (item, index));
        public static int CountCharacters(this string source)
        {
            int count = 0;
            foreach (char c in source)
                count++;
            return count;
        }
        public static IEnumerable<(T item, int index)> WithIndex<T>(this IEnumerable<T> self) => self?.Select((item, index) => (item, index)) ?? new List<(T, int)>();
    }
}
